// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // $, reduce: Functions
			nil,       // empty
			reduce(3), // func, reduce: Functions
			nil,       // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // $
			nil,          // empty
			nil,          // func
			nil,          // identifier
			nil,          // (
			nil,          // )
			nil,          // {
			nil,          // }
			nil,          // ,
			nil,          // ;
			nil,          // =
			nil,          // if
			nil,          // else
			nil,          // for
			nil,          // &&
			nil,          // ||
			nil,          // <=
			nil,          // >=
			nil,          // !=
			nil,          // ==
			nil,          // <
			nil,          // >
			nil,          // /
			nil,          // *
			nil,          // +
			nil,          // -
			nil,          // integerLit
			nil,          // floatLit
			nil,          // keyword
			nil,          // return
			nil,          // struct
			nil,          // type
			nil,          // var
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // $, reduce: Program
			nil,       // empty
			shift(4),  // func
			nil,       // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(2), // $, reduce: Functions
			nil,       // empty
			reduce(2), // func, reduce: Functions
			nil,       // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // func
			shift(5), // identifier
			nil,      // (
			nil,      // )
			nil,      // {
			nil,      // }
			nil,      // ,
			nil,      // ;
			nil,      // =
			nil,      // if
			nil,      // else
			nil,      // for
			nil,      // &&
			nil,      // ||
			nil,      // <=
			nil,      // >=
			nil,      // !=
			nil,      // ==
			nil,      // <
			nil,      // >
			nil,      // /
			nil,      // *
			nil,      // +
			nil,      // -
			nil,      // integerLit
			nil,      // floatLit
			nil,      // keyword
			nil,      // return
			nil,      // struct
			nil,      // type
			nil,      // var
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // func
			nil,      // identifier
			shift(6), // (
			nil,      // )
			nil,      // {
			nil,      // }
			nil,      // ,
			nil,      // ;
			nil,      // =
			nil,      // if
			nil,      // else
			nil,      // for
			nil,      // &&
			nil,      // ||
			nil,      // <=
			nil,      // >=
			nil,      // !=
			nil,      // ==
			nil,      // <
			nil,      // >
			nil,      // /
			nil,      // *
			nil,      // +
			nil,      // -
			nil,      // integerLit
			nil,      // floatLit
			nil,      // keyword
			nil,      // return
			nil,      // struct
			nil,      // type
			nil,      // var
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(7),  // identifier
			nil,       // (
			reduce(8), // ), reduce: Args
			nil,       // {
			nil,       // }
			reduce(8), // ,, reduce: Args
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			reduce(7), // ), reduce: Args
			nil,       // {
			nil,       // }
			reduce(7), // ,, reduce: Args
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			shift(9),  // )
			nil,       // {
			nil,       // }
			shift(10), // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			nil,       // )
			shift(12), // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(13), // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(4), // $, reduce: Function
			nil,       // empty
			reduce(4), // func, reduce: Function
			nil,       // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(11), // identifier, reduce: Statements
			nil,        // (
			nil,        // )
			shift(15),  // {
			reduce(11), // }, reduce: Statements
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(11), // if, reduce: Statements
			nil,        // else
			reduce(11), // for, reduce: Statements
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			reduce(6), // ), reduce: Args
			nil,       // {
			nil,       // }
			reduce(6), // ,, reduce: Args
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(10), // identifier, reduce: Statements
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(10), // }, reduce: Statements
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(10), // if, reduce: Statements
			nil,        // else
			reduce(10), // for, reduce: Statements
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(11), // identifier, reduce: Statements
			nil,        // (
			nil,        // )
			shift(15),  // {
			reduce(11), // }, reduce: Statements
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(11), // if, reduce: Statements
			nil,        // else
			reduce(11), // for, reduce: Statements
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(18), // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			shift(19), // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			shift(27), // if
			nil,       // else
			shift(28), // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(18), // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			shift(29), // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			shift(27), // if
			nil,       // else
			shift(28), // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			shift(30),  // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			reduce(16), // =, reduce: Lhs
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(5), // $, reduce: StatementBlock
			nil,       // empty
			reduce(5), // func, reduce: StatementBlock
			nil,       // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(9), // identifier, reduce: Statements
			nil,       // (
			nil,       // )
			nil,       // {
			reduce(9), // }, reduce: Statements
			nil,       // ,
			nil,       // ;
			nil,       // =
			reduce(9), // if, reduce: Statements
			nil,       // else
			reduce(9), // for, reduce: Statements
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(12), // identifier, reduce: Statement
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(12), // }, reduce: Statement
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(12), // if, reduce: Statement
			nil,        // else
			reduce(12), // for, reduce: Statement
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			shift(31), // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			shift(32), // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			shift(33), // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(22), // identifier, reduce: ElseStatement
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(22), // }, reduce: ElseStatement
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(22), // if, reduce: ElseStatement
			shift(35),  // else
			reduce(22), // for, reduce: ElseStatement
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(19), // identifier, reduce: ControlStatements
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(19), // }, reduce: ControlStatements
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(19), // if, reduce: ControlStatements
			nil,        // else
			reduce(19), // for, reduce: ControlStatements
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(36), // identifier
			shift(37), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(42), // integerLit
			shift(43), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(44),  // identifier
			shift(45),  // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(26), // ;, reduce: ForExpression
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			shift(53),  // integerLit
			shift(54),  // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(5), // identifier, reduce: StatementBlock
			nil,       // (
			nil,       // )
			nil,       // {
			reduce(5), // }, reduce: StatementBlock
			nil,       // ,
			nil,       // ;
			nil,       // =
			reduce(5), // if, reduce: StatementBlock
			nil,       // else
			reduce(5), // for, reduce: StatementBlock
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(55),  // identifier
			shift(56),  // (
			reduce(30), // ), reduce: Params
			nil,        // {
			nil,        // }
			reduce(30), // ,, reduce: Params
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			shift(64),  // integerLit
			shift(65),  // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(13), // identifier, reduce: Statement
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(13), // }, reduce: Statement
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(13), // if, reduce: Statement
			nil,        // else
			reduce(13), // for, reduce: Statement
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(14), // identifier, reduce: Statement
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(14), // }, reduce: Statement
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(14), // if, reduce: Statement
			nil,        // else
			reduce(14), // for, reduce: Statement
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(66), // identifier
			shift(45), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(53), // integerLit
			shift(54), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(18), // identifier, reduce: ControlStatements
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(18), // }, reduce: ControlStatements
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(18), // if, reduce: ControlStatements
			nil,        // else
			reduce(18), // for, reduce: ControlStatements
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			nil,       // )
			shift(15), // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			shift(69),  // (
			nil,        // )
			reduce(51), // {, reduce: Factor
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(51), // &&, reduce: Factor
			reduce(51), // ||, reduce: Factor
			reduce(51), // <=, reduce: Factor
			reduce(51), // >=, reduce: Factor
			reduce(51), // !=, reduce: Factor
			reduce(51), // ==, reduce: Factor
			reduce(51), // <, reduce: Factor
			reduce(51), // >, reduce: Factor
			reduce(51), // /, reduce: Factor
			reduce(51), // *, reduce: Factor
			reduce(51), // +, reduce: Factor
			reduce(51), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(70), // identifier
			shift(71), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(76), // integerLit
			shift(77), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(54), // {, reduce: Factor
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(54), // &&, reduce: Factor
			reduce(54), // ||, reduce: Factor
			reduce(54), // <=, reduce: Factor
			reduce(54), // >=, reduce: Factor
			reduce(54), // !=, reduce: Factor
			reduce(54), // ==, reduce: Factor
			reduce(54), // <, reduce: Factor
			reduce(54), // >, reduce: Factor
			reduce(54), // /, reduce: Factor
			reduce(54), // *, reduce: Factor
			reduce(54), // +, reduce: Factor
			reduce(54), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			nil,       // )
			shift(79), // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			shift(81), // &&
			shift(82), // ||
			shift(84), // <=
			shift(85), // >=
			shift(86), // !=
			shift(87), // ==
			shift(88), // <
			shift(89), // >
			nil,       // /
			nil,       // *
			shift(91), // +
			shift(92), // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(47), // {, reduce: Expression
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(47), // &&, reduce: Expression
			reduce(47), // ||, reduce: Expression
			reduce(47), // <=, reduce: Expression
			reduce(47), // >=, reduce: Expression
			reduce(47), // !=, reduce: Expression
			reduce(47), // ==, reduce: Expression
			reduce(47), // <, reduce: Expression
			reduce(47), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(47), // +, reduce: Expression
			reduce(47), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(49), // {, reduce: Term
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(49), // &&, reduce: Term
			reduce(49), // ||, reduce: Term
			reduce(49), // <=, reduce: Term
			reduce(49), // >=, reduce: Term
			reduce(49), // !=, reduce: Term
			reduce(49), // ==, reduce: Term
			reduce(49), // <, reduce: Term
			reduce(49), // >, reduce: Term
			reduce(49), // /, reduce: Term
			reduce(49), // *, reduce: Term
			reduce(49), // +, reduce: Term
			reduce(49), // -, reduce: Term
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(52), // {, reduce: Factor
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(52), // &&, reduce: Factor
			reduce(52), // ||, reduce: Factor
			reduce(52), // <=, reduce: Factor
			reduce(52), // >=, reduce: Factor
			reduce(52), // !=, reduce: Factor
			reduce(52), // ==, reduce: Factor
			reduce(52), // <, reduce: Factor
			reduce(52), // >, reduce: Factor
			reduce(52), // /, reduce: Factor
			reduce(52), // *, reduce: Factor
			reduce(52), // +, reduce: Factor
			reduce(52), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S43
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(53), // {, reduce: Factor
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(53), // &&, reduce: Factor
			reduce(53), // ||, reduce: Factor
			reduce(53), // <=, reduce: Factor
			reduce(53), // >=, reduce: Factor
			reduce(53), // !=, reduce: Factor
			reduce(53), // ==, reduce: Factor
			reduce(53), // <, reduce: Factor
			reduce(53), // >, reduce: Factor
			reduce(53), // /, reduce: Factor
			reduce(53), // *, reduce: Factor
			reduce(53), // +, reduce: Factor
			reduce(53), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			shift(96),  // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(51), // ;, reduce: Factor
			reduce(16), // =, reduce: Lhs
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(51), // &&, reduce: Factor
			reduce(51), // ||, reduce: Factor
			reduce(51), // <=, reduce: Factor
			reduce(51), // >=, reduce: Factor
			reduce(51), // !=, reduce: Factor
			reduce(51), // ==, reduce: Factor
			reduce(51), // <, reduce: Factor
			reduce(51), // >, reduce: Factor
			reduce(51), // /, reduce: Factor
			reduce(51), // *, reduce: Factor
			reduce(51), // +, reduce: Factor
			reduce(51), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(70), // identifier
			shift(71), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(76), // integerLit
			shift(77), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S46
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(25), // ;, reduce: ForExpression
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S47
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(54), // ;, reduce: Factor
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(54), // &&, reduce: Factor
			reduce(54), // ||, reduce: Factor
			reduce(54), // <=, reduce: Factor
			reduce(54), // >=, reduce: Factor
			reduce(54), // !=, reduce: Factor
			reduce(54), // ==, reduce: Factor
			reduce(54), // <, reduce: Factor
			reduce(54), // >, reduce: Factor
			reduce(54), // /, reduce: Factor
			reduce(54), // *, reduce: Factor
			reduce(54), // +, reduce: Factor
			reduce(54), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(24), // ;, reduce: ForExpression
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S49
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(17), // ;, reduce: Rhs
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			shift(81),  // &&
			shift(82),  // ||
			shift(84),  // <=
			shift(85),  // >=
			shift(86),  // !=
			shift(87),  // ==
			shift(88),  // <
			shift(89),  // >
			nil,        // /
			nil,        // *
			shift(91),  // +
			shift(92),  // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			shift(101), // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S51
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(47), // ;, reduce: Expression
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(47), // &&, reduce: Expression
			reduce(47), // ||, reduce: Expression
			reduce(47), // <=, reduce: Expression
			reduce(47), // >=, reduce: Expression
			reduce(47), // !=, reduce: Expression
			reduce(47), // ==, reduce: Expression
			reduce(47), // <, reduce: Expression
			reduce(47), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(47), // +, reduce: Expression
			reduce(47), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(49), // ;, reduce: Term
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(49), // &&, reduce: Term
			reduce(49), // ||, reduce: Term
			reduce(49), // <=, reduce: Term
			reduce(49), // >=, reduce: Term
			reduce(49), // !=, reduce: Term
			reduce(49), // ==, reduce: Term
			reduce(49), // <, reduce: Term
			reduce(49), // >, reduce: Term
			reduce(49), // /, reduce: Term
			reduce(49), // *, reduce: Term
			reduce(49), // +, reduce: Term
			reduce(49), // -, reduce: Term
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(52), // ;, reduce: Factor
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(52), // &&, reduce: Factor
			reduce(52), // ||, reduce: Factor
			reduce(52), // <=, reduce: Factor
			reduce(52), // >=, reduce: Factor
			reduce(52), // !=, reduce: Factor
			reduce(52), // ==, reduce: Factor
			reduce(52), // <, reduce: Factor
			reduce(52), // >, reduce: Factor
			reduce(52), // /, reduce: Factor
			reduce(52), // *, reduce: Factor
			reduce(52), // +, reduce: Factor
			reduce(52), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(53), // ;, reduce: Factor
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(53), // &&, reduce: Factor
			reduce(53), // ||, reduce: Factor
			reduce(53), // <=, reduce: Factor
			reduce(53), // >=, reduce: Factor
			reduce(53), // !=, reduce: Factor
			reduce(53), // ==, reduce: Factor
			reduce(53), // <, reduce: Factor
			reduce(53), // >, reduce: Factor
			reduce(53), // /, reduce: Factor
			reduce(53), // *, reduce: Factor
			reduce(53), // +, reduce: Factor
			reduce(53), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			shift(103), // (
			reduce(51), // ), reduce: Factor
			nil,        // {
			nil,        // }
			reduce(51), // ,, reduce: Factor
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(51), // &&, reduce: Factor
			reduce(51), // ||, reduce: Factor
			reduce(51), // <=, reduce: Factor
			reduce(51), // >=, reduce: Factor
			reduce(51), // !=, reduce: Factor
			reduce(51), // ==, reduce: Factor
			reduce(51), // <, reduce: Factor
			reduce(51), // >, reduce: Factor
			reduce(51), // /, reduce: Factor
			reduce(51), // *, reduce: Factor
			reduce(51), // +, reduce: Factor
			reduce(51), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(70), // identifier
			shift(71), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(76), // integerLit
			shift(77), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(54), // ), reduce: Factor
			nil,        // {
			nil,        // }
			reduce(54), // ,, reduce: Factor
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(54), // &&, reduce: Factor
			reduce(54), // ||, reduce: Factor
			reduce(54), // <=, reduce: Factor
			reduce(54), // >=, reduce: Factor
			reduce(54), // !=, reduce: Factor
			reduce(54), // ==, reduce: Factor
			reduce(54), // <, reduce: Factor
			reduce(54), // >, reduce: Factor
			reduce(54), // /, reduce: Factor
			reduce(54), // *, reduce: Factor
			reduce(54), // +, reduce: Factor
			reduce(54), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(31), // ), reduce: Param
			nil,        // {
			nil,        // }
			reduce(31), // ,, reduce: Param
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(17), // ), reduce: Rhs
			nil,        // {
			nil,        // }
			reduce(17), // ,, reduce: Rhs
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			shift(81),  // &&
			shift(82),  // ||
			shift(84),  // <=
			shift(85),  // >=
			shift(86),  // !=
			shift(87),  // ==
			shift(88),  // <
			shift(89),  // >
			nil,        // /
			nil,        // *
			shift(91),  // +
			shift(92),  // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S60
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(108), // )
			nil,        // {
			nil,        // }
			shift(109), // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S61
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(29), // ), reduce: Params
			nil,        // {
			nil,        // }
			reduce(29), // ,, reduce: Params
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(47), // ), reduce: Expression
			nil,        // {
			nil,        // }
			reduce(47), // ,, reduce: Expression
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(47), // &&, reduce: Expression
			reduce(47), // ||, reduce: Expression
			reduce(47), // <=, reduce: Expression
			reduce(47), // >=, reduce: Expression
			reduce(47), // !=, reduce: Expression
			reduce(47), // ==, reduce: Expression
			reduce(47), // <, reduce: Expression
			reduce(47), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(47), // +, reduce: Expression
			reduce(47), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(49), // ), reduce: Term
			nil,        // {
			nil,        // }
			reduce(49), // ,, reduce: Term
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(49), // &&, reduce: Term
			reduce(49), // ||, reduce: Term
			reduce(49), // <=, reduce: Term
			reduce(49), // >=, reduce: Term
			reduce(49), // !=, reduce: Term
			reduce(49), // ==, reduce: Term
			reduce(49), // <, reduce: Term
			reduce(49), // >, reduce: Term
			reduce(49), // /, reduce: Term
			reduce(49), // *, reduce: Term
			reduce(49), // +, reduce: Term
			reduce(49), // -, reduce: Term
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S64
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(52), // ), reduce: Factor
			nil,        // {
			nil,        // }
			reduce(52), // ,, reduce: Factor
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(52), // &&, reduce: Factor
			reduce(52), // ||, reduce: Factor
			reduce(52), // <=, reduce: Factor
			reduce(52), // >=, reduce: Factor
			reduce(52), // !=, reduce: Factor
			reduce(52), // ==, reduce: Factor
			reduce(52), // <, reduce: Factor
			reduce(52), // >, reduce: Factor
			reduce(52), // /, reduce: Factor
			reduce(52), // *, reduce: Factor
			reduce(52), // +, reduce: Factor
			reduce(52), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(53), // ), reduce: Factor
			nil,        // {
			nil,        // }
			reduce(53), // ,, reduce: Factor
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(53), // &&, reduce: Factor
			reduce(53), // ||, reduce: Factor
			reduce(53), // <=, reduce: Factor
			reduce(53), // >=, reduce: Factor
			reduce(53), // !=, reduce: Factor
			reduce(53), // ==, reduce: Factor
			reduce(53), // <, reduce: Factor
			reduce(53), // >, reduce: Factor
			reduce(53), // /, reduce: Factor
			reduce(53), // *, reduce: Factor
			reduce(53), // +, reduce: Factor
			reduce(53), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S66
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			shift(96),  // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(51), // ;, reduce: Factor
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(51), // &&, reduce: Factor
			reduce(51), // ||, reduce: Factor
			reduce(51), // <=, reduce: Factor
			reduce(51), // >=, reduce: Factor
			reduce(51), // !=, reduce: Factor
			reduce(51), // ==, reduce: Factor
			reduce(51), // <, reduce: Factor
			reduce(51), // >, reduce: Factor
			reduce(51), // /, reduce: Factor
			reduce(51), // *, reduce: Factor
			reduce(51), // +, reduce: Factor
			reduce(51), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S67
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(15), // ;, reduce: AssignStatement
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(21), // identifier, reduce: ElseStatement
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(21), // }, reduce: ElseStatement
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(21), // if, reduce: ElseStatement
			nil,        // else
			reduce(21), // for, reduce: ElseStatement
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S69
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(55),  // identifier
			shift(56),  // (
			reduce(30), // ), reduce: Params
			nil,        // {
			nil,        // }
			reduce(30), // ,, reduce: Params
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			shift(64),  // integerLit
			shift(65),  // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			shift(112), // (
			reduce(51), // ), reduce: Factor
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(51), // &&, reduce: Factor
			reduce(51), // ||, reduce: Factor
			reduce(51), // <=, reduce: Factor
			reduce(51), // >=, reduce: Factor
			reduce(51), // !=, reduce: Factor
			reduce(51), // ==, reduce: Factor
			reduce(51), // <, reduce: Factor
			reduce(51), // >, reduce: Factor
			reduce(51), // /, reduce: Factor
			reduce(51), // *, reduce: Factor
			reduce(51), // +, reduce: Factor
			reduce(51), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(70), // identifier
			shift(71), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(76), // integerLit
			shift(77), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S72
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(54), // ), reduce: Factor
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(54), // &&, reduce: Factor
			reduce(54), // ||, reduce: Factor
			reduce(54), // <=, reduce: Factor
			reduce(54), // >=, reduce: Factor
			reduce(54), // !=, reduce: Factor
			reduce(54), // ==, reduce: Factor
			reduce(54), // <, reduce: Factor
			reduce(54), // >, reduce: Factor
			reduce(54), // /, reduce: Factor
			reduce(54), // *, reduce: Factor
			reduce(54), // +, reduce: Factor
			reduce(54), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(114), // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			shift(81),  // &&
			shift(82),  // ||
			shift(84),  // <=
			shift(85),  // >=
			shift(86),  // !=
			shift(87),  // ==
			shift(88),  // <
			shift(89),  // >
			nil,        // /
			nil,        // *
			shift(91),  // +
			shift(92),  // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(47), // ), reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(47), // &&, reduce: Expression
			reduce(47), // ||, reduce: Expression
			reduce(47), // <=, reduce: Expression
			reduce(47), // >=, reduce: Expression
			reduce(47), // !=, reduce: Expression
			reduce(47), // ==, reduce: Expression
			reduce(47), // <, reduce: Expression
			reduce(47), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(47), // +, reduce: Expression
			reduce(47), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S75
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(49), // ), reduce: Term
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(49), // &&, reduce: Term
			reduce(49), // ||, reduce: Term
			reduce(49), // <=, reduce: Term
			reduce(49), // >=, reduce: Term
			reduce(49), // !=, reduce: Term
			reduce(49), // ==, reduce: Term
			reduce(49), // <, reduce: Term
			reduce(49), // >, reduce: Term
			reduce(49), // /, reduce: Term
			reduce(49), // *, reduce: Term
			reduce(49), // +, reduce: Term
			reduce(49), // -, reduce: Term
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(52), // ), reduce: Factor
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(52), // &&, reduce: Factor
			reduce(52), // ||, reduce: Factor
			reduce(52), // <=, reduce: Factor
			reduce(52), // >=, reduce: Factor
			reduce(52), // !=, reduce: Factor
			reduce(52), // ==, reduce: Factor
			reduce(52), // <, reduce: Factor
			reduce(52), // >, reduce: Factor
			reduce(52), // /, reduce: Factor
			reduce(52), // *, reduce: Factor
			reduce(52), // +, reduce: Factor
			reduce(52), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S77
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(53), // ), reduce: Factor
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(53), // &&, reduce: Factor
			reduce(53), // ||, reduce: Factor
			reduce(53), // <=, reduce: Factor
			reduce(53), // >=, reduce: Factor
			reduce(53), // !=, reduce: Factor
			reduce(53), // ==, reduce: Factor
			reduce(53), // <, reduce: Factor
			reduce(53), // >, reduce: Factor
			reduce(53), // /, reduce: Factor
			reduce(53), // *, reduce: Factor
			reduce(53), // +, reduce: Factor
			reduce(53), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S78
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(20), // identifier, reduce: IfStatement
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(20), // }, reduce: IfStatement
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(20), // if, reduce: IfStatement
			reduce(20), // else, reduce: IfStatement
			reduce(20), // for, reduce: IfStatement
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S79
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(11), // identifier, reduce: Statements
			nil,        // (
			nil,        // )
			shift(15),  // {
			reduce(11), // }, reduce: Statements
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(11), // if, reduce: Statements
			nil,        // else
			reduce(11), // for, reduce: Statements
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S80
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(36), // identifier
			shift(37), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(42), // integerLit
			shift(43), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S81
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(32), // identifier, reduce: BoolOp
			reduce(32), // (, reduce: BoolOp
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(32), // integerLit, reduce: BoolOp
			reduce(32), // floatLit, reduce: BoolOp
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(33), // identifier, reduce: BoolOp
			reduce(33), // (, reduce: BoolOp
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(33), // integerLit, reduce: BoolOp
			reduce(33), // floatLit, reduce: BoolOp
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S83
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(36), // identifier
			shift(37), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(42), // integerLit
			shift(43), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S84
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(34), // identifier, reduce: RelOp
			reduce(34), // (, reduce: RelOp
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(34), // integerLit, reduce: RelOp
			reduce(34), // floatLit, reduce: RelOp
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S85
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(35), // identifier, reduce: RelOp
			reduce(35), // (, reduce: RelOp
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(35), // integerLit, reduce: RelOp
			reduce(35), // floatLit, reduce: RelOp
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S86
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(36), // identifier, reduce: RelOp
			reduce(36), // (, reduce: RelOp
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(36), // integerLit, reduce: RelOp
			reduce(36), // floatLit, reduce: RelOp
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S87
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(37), // identifier, reduce: RelOp
			reduce(37), // (, reduce: RelOp
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(37), // integerLit, reduce: RelOp
			reduce(37), // floatLit, reduce: RelOp
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(38), // identifier, reduce: RelOp
			reduce(38), // (, reduce: RelOp
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(38), // integerLit, reduce: RelOp
			reduce(38), // floatLit, reduce: RelOp
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(39), // identifier, reduce: RelOp
			reduce(39), // (, reduce: RelOp
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(39), // integerLit, reduce: RelOp
			reduce(39), // floatLit, reduce: RelOp
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S90
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(36), // identifier
			shift(37), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(42), // integerLit
			shift(43), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S91
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(42), // identifier, reduce: ArithOp2
			reduce(42), // (, reduce: ArithOp2
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(42), // integerLit, reduce: ArithOp2
			reduce(42), // floatLit, reduce: ArithOp2
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(43), // identifier, reduce: ArithOp2
			reduce(43), // (, reduce: ArithOp2
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(43), // integerLit, reduce: ArithOp2
			reduce(43), // floatLit, reduce: ArithOp2
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(36), // identifier
			shift(37), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(42), // integerLit
			shift(43), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S94
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(40), // identifier, reduce: ArithOp1
			reduce(40), // (, reduce: ArithOp1
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(40), // integerLit, reduce: ArithOp1
			reduce(40), // floatLit, reduce: ArithOp1
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(41), // identifier, reduce: ArithOp1
			reduce(41), // (, reduce: ArithOp1
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			reduce(41), // integerLit, reduce: ArithOp1
			reduce(41), // floatLit, reduce: ArithOp1
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S96
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(55),  // identifier
			shift(56),  // (
			reduce(30), // ), reduce: Params
			nil,        // {
			nil,        // }
			reduce(30), // ,, reduce: Params
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			shift(64),  // integerLit
			shift(65),  // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S97
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(125), // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			shift(81),  // &&
			shift(82),  // ||
			shift(84),  // <=
			shift(85),  // >=
			shift(86),  // !=
			shift(87),  // ==
			shift(88),  // <
			shift(89),  // >
			nil,        // /
			nil,        // *
			shift(91),  // +
			shift(92),  // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(66), // identifier
			shift(45), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(53), // integerLit
			shift(54), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S99
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(66), // identifier
			shift(45), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(53), // integerLit
			shift(54), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S100
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(66), // identifier
			shift(45), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(53), // integerLit
			shift(54), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S101
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(44),  // identifier
			shift(45),  // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(26), // ;, reduce: ForExpression
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			shift(53),  // integerLit
			shift(54),  // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S102
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(66), // identifier
			shift(45), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(53), // integerLit
			shift(54), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(55),  // identifier
			shift(56),  // (
			reduce(30), // ), reduce: Params
			nil,        // {
			nil,        // }
			reduce(30), // ,, reduce: Params
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			shift(64),  // integerLit
			shift(65),  // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(132), // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			shift(81),  // &&
			shift(82),  // ||
			shift(84),  // <=
			shift(85),  // >=
			shift(86),  // !=
			shift(87),  // ==
			shift(88),  // <
			shift(89),  // >
			nil,        // /
			nil,        // *
			shift(91),  // +
			shift(92),  // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(55), // identifier
			shift(56), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(64), // integerLit
			shift(65), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(55), // identifier
			shift(56), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(64), // integerLit
			shift(65), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S107
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(55), // identifier
			shift(56), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(64), // integerLit
			shift(65), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S108
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(27), // ;, reduce: FunctionCall
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S109
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(55), // identifier
			shift(56), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(64), // integerLit
			shift(65), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S110
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(55), // identifier
			shift(56), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(64), // integerLit
			shift(65), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S111
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(138), // )
			nil,        // {
			nil,        // }
			shift(109), // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S112
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(55),  // identifier
			shift(56),  // (
			reduce(30), // ), reduce: Params
			nil,        // {
			nil,        // }
			reduce(30), // ,, reduce: Params
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			shift(64),  // integerLit
			shift(65),  // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S113
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(140), // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			shift(81),  // &&
			shift(82),  // ||
			shift(84),  // <=
			shift(85),  // >=
			shift(86),  // !=
			shift(87),  // ==
			shift(88),  // <
			shift(89),  // >
			nil,        // /
			nil,        // *
			shift(91),  // +
			shift(92),  // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S114
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(50), // {, reduce: Factor
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(50), // &&, reduce: Factor
			reduce(50), // ||, reduce: Factor
			reduce(50), // <=, reduce: Factor
			reduce(50), // >=, reduce: Factor
			reduce(50), // !=, reduce: Factor
			reduce(50), // ==, reduce: Factor
			reduce(50), // <, reduce: Factor
			reduce(50), // >, reduce: Factor
			reduce(50), // /, reduce: Factor
			reduce(50), // *, reduce: Factor
			reduce(50), // +, reduce: Factor
			reduce(50), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S115
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(70), // identifier
			shift(71), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(76), // integerLit
			shift(77), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S116
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(70), // identifier
			shift(71), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(76), // integerLit
			shift(77), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S117
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(70), // identifier
			shift(71), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(76), // integerLit
			shift(77), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S118
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(70), // identifier
			shift(71), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(76), // integerLit
			shift(77), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S119
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(18),  // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			shift(145), // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			shift(27),  // if
			nil,        // else
			shift(28),  // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(46), // {, reduce: Expression
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(46), // &&, reduce: Expression
			reduce(46), // ||, reduce: Expression
			reduce(46), // <=, reduce: Expression
			reduce(46), // >=, reduce: Expression
			reduce(46), // !=, reduce: Expression
			reduce(46), // ==, reduce: Expression
			reduce(46), // <, reduce: Expression
			reduce(46), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(46), // +, reduce: Expression
			reduce(46), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S121
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(45), // {, reduce: Expression
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(45), // &&, reduce: Expression
			reduce(45), // ||, reduce: Expression
			reduce(45), // <=, reduce: Expression
			reduce(45), // >=, reduce: Expression
			reduce(45), // !=, reduce: Expression
			reduce(45), // ==, reduce: Expression
			reduce(45), // <, reduce: Expression
			reduce(45), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(45), // +, reduce: Expression
			reduce(45), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S122
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(44), // {, reduce: Expression
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(44), // &&, reduce: Expression
			reduce(44), // ||, reduce: Expression
			reduce(44), // <=, reduce: Expression
			reduce(44), // >=, reduce: Expression
			reduce(44), // !=, reduce: Expression
			reduce(44), // ==, reduce: Expression
			reduce(44), // <, reduce: Expression
			reduce(44), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(44), // +, reduce: Expression
			reduce(44), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(48), // {, reduce: Term
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(48), // &&, reduce: Term
			reduce(48), // ||, reduce: Term
			reduce(48), // <=, reduce: Term
			reduce(48), // >=, reduce: Term
			reduce(48), // !=, reduce: Term
			reduce(48), // ==, reduce: Term
			reduce(48), // <, reduce: Term
			reduce(48), // >, reduce: Term
			reduce(48), // /, reduce: Term
			reduce(48), // *, reduce: Term
			reduce(48), // +, reduce: Term
			reduce(48), // -, reduce: Term
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(146), // )
			nil,        // {
			nil,        // }
			shift(109), // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(50), // ;, reduce: Factor
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(50), // &&, reduce: Factor
			reduce(50), // ||, reduce: Factor
			reduce(50), // <=, reduce: Factor
			reduce(50), // >=, reduce: Factor
			reduce(50), // !=, reduce: Factor
			reduce(50), // ==, reduce: Factor
			reduce(50), // <, reduce: Factor
			reduce(50), // >, reduce: Factor
			reduce(50), // /, reduce: Factor
			reduce(50), // *, reduce: Factor
			reduce(50), // +, reduce: Factor
			reduce(50), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(46), // ;, reduce: Expression
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(46), // &&, reduce: Expression
			reduce(46), // ||, reduce: Expression
			reduce(46), // <=, reduce: Expression
			reduce(46), // >=, reduce: Expression
			reduce(46), // !=, reduce: Expression
			reduce(46), // ==, reduce: Expression
			reduce(46), // <, reduce: Expression
			reduce(46), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(46), // +, reduce: Expression
			reduce(46), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S127
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(45), // ;, reduce: Expression
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(45), // &&, reduce: Expression
			reduce(45), // ||, reduce: Expression
			reduce(45), // <=, reduce: Expression
			reduce(45), // >=, reduce: Expression
			reduce(45), // !=, reduce: Expression
			reduce(45), // ==, reduce: Expression
			reduce(45), // <, reduce: Expression
			reduce(45), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(45), // +, reduce: Expression
			reduce(45), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(44), // ;, reduce: Expression
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(44), // &&, reduce: Expression
			reduce(44), // ||, reduce: Expression
			reduce(44), // <=, reduce: Expression
			reduce(44), // >=, reduce: Expression
			reduce(44), // !=, reduce: Expression
			reduce(44), // ==, reduce: Expression
			reduce(44), // <, reduce: Expression
			reduce(44), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(44), // +, reduce: Expression
			reduce(44), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S129
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			shift(147), // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S130
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(48), // ;, reduce: Term
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(48), // &&, reduce: Term
			reduce(48), // ||, reduce: Term
			reduce(48), // <=, reduce: Term
			reduce(48), // >=, reduce: Term
			reduce(48), // !=, reduce: Term
			reduce(48), // ==, reduce: Term
			reduce(48), // <, reduce: Term
			reduce(48), // >, reduce: Term
			reduce(48), // /, reduce: Term
			reduce(48), // *, reduce: Term
			reduce(48), // +, reduce: Term
			reduce(48), // -, reduce: Term
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S131
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(148), // )
			nil,        // {
			nil,        // }
			shift(109), // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S132
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(50), // ), reduce: Factor
			nil,        // {
			nil,        // }
			reduce(50), // ,, reduce: Factor
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(50), // &&, reduce: Factor
			reduce(50), // ||, reduce: Factor
			reduce(50), // <=, reduce: Factor
			reduce(50), // >=, reduce: Factor
			reduce(50), // !=, reduce: Factor
			reduce(50), // ==, reduce: Factor
			reduce(50), // <, reduce: Factor
			reduce(50), // >, reduce: Factor
			reduce(50), // /, reduce: Factor
			reduce(50), // *, reduce: Factor
			reduce(50), // +, reduce: Factor
			reduce(50), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S133
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(46), // ), reduce: Expression
			nil,        // {
			nil,        // }
			reduce(46), // ,, reduce: Expression
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(46), // &&, reduce: Expression
			reduce(46), // ||, reduce: Expression
			reduce(46), // <=, reduce: Expression
			reduce(46), // >=, reduce: Expression
			reduce(46), // !=, reduce: Expression
			reduce(46), // ==, reduce: Expression
			reduce(46), // <, reduce: Expression
			reduce(46), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(46), // +, reduce: Expression
			reduce(46), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S134
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(45), // ), reduce: Expression
			nil,        // {
			nil,        // }
			reduce(45), // ,, reduce: Expression
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(45), // &&, reduce: Expression
			reduce(45), // ||, reduce: Expression
			reduce(45), // <=, reduce: Expression
			reduce(45), // >=, reduce: Expression
			reduce(45), // !=, reduce: Expression
			reduce(45), // ==, reduce: Expression
			reduce(45), // <, reduce: Expression
			reduce(45), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(45), // +, reduce: Expression
			reduce(45), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S135
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(44), // ), reduce: Expression
			nil,        // {
			nil,        // }
			reduce(44), // ,, reduce: Expression
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(44), // &&, reduce: Expression
			reduce(44), // ||, reduce: Expression
			reduce(44), // <=, reduce: Expression
			reduce(44), // >=, reduce: Expression
			reduce(44), // !=, reduce: Expression
			reduce(44), // ==, reduce: Expression
			reduce(44), // <, reduce: Expression
			reduce(44), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(44), // +, reduce: Expression
			reduce(44), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S136
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(28), // ), reduce: Params
			nil,        // {
			nil,        // }
			reduce(28), // ,, reduce: Params
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S137
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(48), // ), reduce: Term
			nil,        // {
			nil,        // }
			reduce(48), // ,, reduce: Term
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(48), // &&, reduce: Term
			reduce(48), // ||, reduce: Term
			reduce(48), // <=, reduce: Term
			reduce(48), // >=, reduce: Term
			reduce(48), // !=, reduce: Term
			reduce(48), // ==, reduce: Term
			reduce(48), // <, reduce: Term
			reduce(48), // >, reduce: Term
			reduce(48), // /, reduce: Term
			reduce(48), // *, reduce: Term
			reduce(48), // +, reduce: Term
			reduce(48), // -, reduce: Term
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S138
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(27), // {, reduce: FunctionCall
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(27), // &&, reduce: FunctionCall
			reduce(27), // ||, reduce: FunctionCall
			reduce(27), // <=, reduce: FunctionCall
			reduce(27), // >=, reduce: FunctionCall
			reduce(27), // !=, reduce: FunctionCall
			reduce(27), // ==, reduce: FunctionCall
			reduce(27), // <, reduce: FunctionCall
			reduce(27), // >, reduce: FunctionCall
			reduce(27), // /, reduce: FunctionCall
			reduce(27), // *, reduce: FunctionCall
			reduce(27), // +, reduce: FunctionCall
			reduce(27), // -, reduce: FunctionCall
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S139
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			shift(149), // )
			nil,        // {
			nil,        // }
			shift(109), // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S140
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(50), // ), reduce: Factor
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(50), // &&, reduce: Factor
			reduce(50), // ||, reduce: Factor
			reduce(50), // <=, reduce: Factor
			reduce(50), // >=, reduce: Factor
			reduce(50), // !=, reduce: Factor
			reduce(50), // ==, reduce: Factor
			reduce(50), // <, reduce: Factor
			reduce(50), // >, reduce: Factor
			reduce(50), // /, reduce: Factor
			reduce(50), // *, reduce: Factor
			reduce(50), // +, reduce: Factor
			reduce(50), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(46), // ), reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(46), // &&, reduce: Expression
			reduce(46), // ||, reduce: Expression
			reduce(46), // <=, reduce: Expression
			reduce(46), // >=, reduce: Expression
			reduce(46), // !=, reduce: Expression
			reduce(46), // ==, reduce: Expression
			reduce(46), // <, reduce: Expression
			reduce(46), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(46), // +, reduce: Expression
			reduce(46), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S142
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(45), // ), reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(45), // &&, reduce: Expression
			reduce(45), // ||, reduce: Expression
			reduce(45), // <=, reduce: Expression
			reduce(45), // >=, reduce: Expression
			reduce(45), // !=, reduce: Expression
			reduce(45), // ==, reduce: Expression
			reduce(45), // <, reduce: Expression
			reduce(45), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(45), // +, reduce: Expression
			reduce(45), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S143
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(44), // ), reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(44), // &&, reduce: Expression
			reduce(44), // ||, reduce: Expression
			reduce(44), // <=, reduce: Expression
			reduce(44), // >=, reduce: Expression
			reduce(44), // !=, reduce: Expression
			reduce(44), // ==, reduce: Expression
			reduce(44), // <, reduce: Expression
			reduce(44), // >, reduce: Expression
			shift(94),  // /
			shift(95),  // *
			reduce(44), // +, reduce: Expression
			reduce(44), // -, reduce: Expression
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S144
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(48), // ), reduce: Term
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(48), // &&, reduce: Term
			reduce(48), // ||, reduce: Term
			reduce(48), // <=, reduce: Term
			reduce(48), // >=, reduce: Term
			reduce(48), // !=, reduce: Term
			reduce(48), // ==, reduce: Term
			reduce(48), // <, reduce: Term
			reduce(48), // >, reduce: Term
			reduce(48), // /, reduce: Term
			reduce(48), // *, reduce: Term
			reduce(48), // +, reduce: Term
			reduce(48), // -, reduce: Term
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S145
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			reduce(5), // identifier, reduce: StatementBlock
			nil,       // (
			nil,       // )
			nil,       // {
			reduce(5), // }, reduce: StatementBlock
			nil,       // ,
			nil,       // ;
			nil,       // =
			reduce(5), // if, reduce: StatementBlock
			reduce(5), // else, reduce: StatementBlock
			reduce(5), // for, reduce: StatementBlock
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S146
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			reduce(27), // ;, reduce: FunctionCall
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(27), // &&, reduce: FunctionCall
			reduce(27), // ||, reduce: FunctionCall
			reduce(27), // <=, reduce: FunctionCall
			reduce(27), // >=, reduce: FunctionCall
			reduce(27), // !=, reduce: FunctionCall
			reduce(27), // ==, reduce: FunctionCall
			reduce(27), // <, reduce: FunctionCall
			reduce(27), // >, reduce: FunctionCall
			reduce(27), // /, reduce: FunctionCall
			reduce(27), // *, reduce: FunctionCall
			reduce(27), // +, reduce: FunctionCall
			reduce(27), // -, reduce: FunctionCall
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			shift(150), // identifier
			shift(37),  // (
			nil,        // )
			reduce(26), // {, reduce: ForExpression
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			shift(42),  // integerLit
			shift(43),  // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S148
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(27), // ), reduce: FunctionCall
			nil,        // {
			nil,        // }
			reduce(27), // ,, reduce: FunctionCall
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(27), // &&, reduce: FunctionCall
			reduce(27), // ||, reduce: FunctionCall
			reduce(27), // <=, reduce: FunctionCall
			reduce(27), // >=, reduce: FunctionCall
			reduce(27), // !=, reduce: FunctionCall
			reduce(27), // ==, reduce: FunctionCall
			reduce(27), // <, reduce: FunctionCall
			reduce(27), // >, reduce: FunctionCall
			reduce(27), // /, reduce: FunctionCall
			reduce(27), // *, reduce: FunctionCall
			reduce(27), // +, reduce: FunctionCall
			reduce(27), // -, reduce: FunctionCall
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			reduce(27), // ), reduce: FunctionCall
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(27), // &&, reduce: FunctionCall
			reduce(27), // ||, reduce: FunctionCall
			reduce(27), // <=, reduce: FunctionCall
			reduce(27), // >=, reduce: FunctionCall
			reduce(27), // !=, reduce: FunctionCall
			reduce(27), // ==, reduce: FunctionCall
			reduce(27), // <, reduce: FunctionCall
			reduce(27), // >, reduce: FunctionCall
			reduce(27), // /, reduce: FunctionCall
			reduce(27), // *, reduce: FunctionCall
			reduce(27), // +, reduce: FunctionCall
			reduce(27), // -, reduce: FunctionCall
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S150
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			shift(69),  // (
			nil,        // )
			reduce(51), // {, reduce: Factor
			nil,        // }
			nil,        // ,
			nil,        // ;
			reduce(16), // =, reduce: Lhs
			nil,        // if
			nil,        // else
			nil,        // for
			reduce(51), // &&, reduce: Factor
			reduce(51), // ||, reduce: Factor
			reduce(51), // <=, reduce: Factor
			reduce(51), // >=, reduce: Factor
			reduce(51), // !=, reduce: Factor
			reduce(51), // ==, reduce: Factor
			reduce(51), // <, reduce: Factor
			reduce(51), // >, reduce: Factor
			reduce(51), // /, reduce: Factor
			reduce(51), // *, reduce: Factor
			reduce(51), // +, reduce: Factor
			reduce(51), // -, reduce: Factor
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S151
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(25), // {, reduce: ForExpression
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S152
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			nil,        // {
			nil,        // }
			nil,        // ,
			nil,        // ;
			shift(156), // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S153
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(24), // {, reduce: ForExpression
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S154
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(17), // {, reduce: Rhs
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			shift(81),  // &&
			shift(82),  // ||
			shift(84),  // <=
			shift(85),  // >=
			shift(86),  // !=
			shift(87),  // ==
			shift(88),  // <
			shift(89),  // >
			nil,        // /
			nil,        // *
			shift(91),  // +
			shift(92),  // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S155
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			nil,       // identifier
			nil,       // (
			nil,       // )
			shift(15), // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			nil,       // integerLit
			nil,       // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S156
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // func
			shift(36), // identifier
			shift(37), // (
			nil,       // )
			nil,       // {
			nil,       // }
			nil,       // ,
			nil,       // ;
			nil,       // =
			nil,       // if
			nil,       // else
			nil,       // for
			nil,       // &&
			nil,       // ||
			nil,       // <=
			nil,       // >=
			nil,       // !=
			nil,       // ==
			nil,       // <
			nil,       // >
			nil,       // /
			nil,       // *
			nil,       // +
			nil,       // -
			shift(42), // integerLit
			shift(43), // floatLit
			nil,       // keyword
			nil,       // return
			nil,       // struct
			nil,       // type
			nil,       // var
		},
	},
	actionRow{ // S157
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			reduce(23), // identifier, reduce: ForStatement
			nil,        // (
			nil,        // )
			nil,        // {
			reduce(23), // }, reduce: ForStatement
			nil,        // ,
			nil,        // ;
			nil,        // =
			reduce(23), // if, reduce: ForStatement
			nil,        // else
			reduce(23), // for, reduce: ForStatement
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
	actionRow{ // S158
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // func
			nil,        // identifier
			nil,        // (
			nil,        // )
			reduce(15), // {, reduce: AssignStatement
			nil,        // }
			nil,        // ,
			nil,        // ;
			nil,        // =
			nil,        // if
			nil,        // else
			nil,        // for
			nil,        // &&
			nil,        // ||
			nil,        // <=
			nil,        // >=
			nil,        // !=
			nil,        // ==
			nil,        // <
			nil,        // >
			nil,        // /
			nil,        // *
			nil,        // +
			nil,        // -
			nil,        // integerLit
			nil,        // floatLit
			nil,        // keyword
			nil,        // return
			nil,        // struct
			nil,        // type
			nil,        // var
		},
	},
}
