// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"inutil/token"
)

const (
	NoState    = -1
	NumStates  = 80
	NumSymbols = 87
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '+'
1: '-'
2: '0'
3: '-'
4: 'e'
5: 'm'
6: 'p'
7: 't'
8: 'y'
9: '('
10: ')'
11: '{'
12: '}'
13: ','
14: ';'
15: '='
16: '&'
17: '&'
18: '|'
19: '|'
20: '<'
21: '='
22: '>'
23: '='
24: '!'
25: '='
26: '='
27: '='
28: '<'
29: '>'
30: '/'
31: '*'
32: '+'
33: '-'
34: '_'
35: '/'
36: '/'
37: '\n'
38: '/'
39: '*'
40: '*'
41: '*'
42: '/'
43: '0'
44: '.'
45: 'v'
46: 'a'
47: 'r'
48: 'f'
49: 'u'
50: 'n'
51: 'c'
52: 's'
53: 't'
54: 'r'
55: 'u'
56: 'c'
57: 't'
58: 't'
59: 'y'
60: 'p'
61: 'e'
62: 'r'
63: 'e'
64: 't'
65: 'u'
66: 'r'
67: 'n'
68: 'i'
69: 'f'
70: 'e'
71: 'l'
72: 's'
73: 'e'
74: 'f'
75: 'o'
76: 'r'
77: '\t'
78: '\n'
79: '\r'
80: ' '
81: '1'-'9'
82: 'A'-'Z'
83: 'a'-'z'
84: '0'-'9'
85: '1'-'9'
86: .
*/
